// KindredSpirits project from CS1.

/*
Two binary trees are kindred spirits if the preorder traversal of one of the trees corresponds
to the postorder traversal of the other tree.
*/

#include <stdio.h>
#include <stdlib.h>

typedef struct node
{
	// Each node holds a single integer.
	int data;

	// Pointers to the node's left and right children.
	struct node *left, *right;
} node;

typedef struct Stack
{
  int *array, size, capacity;

} Stack;

/*
A pretty standard create_node() function. Creates a new binary tree node,
initializes its members, and returns a pointer to the new node.
*/
node *new_node(int data)
{
	node *n = malloc(sizeof(node));

	if (n == NULL)
	{
	printf("Error: out of memory.\n");
	return NULL;
	}

	n->data = data;
	n->left = n->right = NULL;

	return n;
}

int sameNodeData (node *a, node *b)
{
  return (a->data == b->data);
}

int isReflection(node *a, node *b)
{
  int reflection = 1, reflection_b = 1;

  // Base cases for null roots
  if (a == NULL && b == NULL)
    return 1;
  else if (a != NULL && b == NULL)
    return 0;
  else if (a == NULL && b != NULL)
    return 0;

  // If the roots/nodes have the same data,
  // traverse (recursively) through tree 'a' and 'b',
  // then set/return the correct return value.
  if (sameNodeData(a, b))
  {
    if (a->left == NULL && b->right == NULL)
      reflection = isReflection(a->right, b->left);
    else if (a->right == NULL && b->left == NULL)
      reflection = isReflection(a->left, b->right);
    else if (a->left != NULL && a->right != NULL && b->left != NULL && \
      b->right != NULL)
    {
      reflection = isReflection(a->right, b->left);
      reflection_b = isReflection(a->left, b->right);
    }
    else
      return 1;

    // Breaks recursion in case one of the steps returns a 0 value.
    if (reflection == 0 || reflection_b == 0)
      return 0;
  }
  else
    return 0;

  return reflection;
}

node *makeReflection(node *root)
{
  node *reflection = NULL;

  if (root == NULL)
  {
    free(reflection);
    return NULL;
  }

  // Makes reflection node of current root.
  reflection = new_node(root->data);

  // Checks for more branches and creates a new node using recursion.
  if (root->left == NULL && root->right != NULL)
    reflection->left = makeReflection(root->right);
  else if (root->left != NULL && root->right == NULL)
    reflection->right = makeReflection(root->left);
  else
  {
    reflection->left = makeReflection(root->right);
    reflection->right = makeReflection(root->left);
  }

  return reflection;

}

// Preorder traversal and pushes values onto a stack.
void preorder_recursive(node *root, Stack *s)
{
	if (root == NULL)
		return;

	s->array[ s->size++ ] = root->data;
	preorder_recursive(root->left, s);
	preorder_recursive(root->right, s);
}

// Post-Order traversal and pushes values onto a stack.
void postorder_recursive(node *root, Stack *s)
{
	if (root == NULL)
		return;

	postorder_recursive(root->left, s);
	postorder_recursive(root->right, s);
	s->array[ s->size++ ] = root->data;
}

// Count Nodes recusively
int count_nodes(node *root)
{
	if (root == NULL)
		return 0;

	return 1 + count_nodes(root->left) + count_nodes(root->right);
}

// Creates a stack with an internal array of length 'capacity'
Stack *createStack(int capacity)
{
	Stack *s;

	if ((s = malloc(sizeof(Stack))) == NULL)
		return NULL;

	if ((s->array = malloc(sizeof(int) * capacity)) == NULL)
	{
		free(s);
		return NULL;
	}

	s->size = 0;
	s->capacity = capacity;

	return s;
}

// Destroy stack
Stack *destroyStack(Stack *s)
{
	if (s == NULL)
		return NULL;

	free(s->array);
	free(s);

	return NULL;
}

// Compares array values of two different stacks.
int sameStack(Stack *s1, Stack *s2)
{
  int i;

  // Returns right away, if the stacks sizes are different.
  if (s1->size != s2->size)
    return 0;

  for (i = 0; i < s1->capacity; i++)
    if (s1->array[i] != s2->array[i])
      return 0;

  return 1;
}

// Creates a Stack of preorder tree traversal values.
Stack *make_preorder_stack(node *root)
{
  int length = 0;
  Stack *s = NULL;

  length = count_nodes(root);

  s = createStack(length);

  preorder_recursive(root, s);

  return s;
}

// Creates a Stack of postorder tree traversal values.
Stack *make_postorder_stack(node *root)
{
  int length = 0;
  Stack *s = NULL;

  length = count_nodes(root);

  s = createStack(length);

  postorder_recursive(root, s);

  return s;
}

int kindredSpirits(node *a, node *b)
{
  int i, pre_a = 1, pre_b = 1;
  Stack *stack_1, *stack_2;

  // NULL base cases.
  if (a == NULL && b == NULL)
    return 1;
  else if (a != NULL && b == NULL)
    return 0;
  else if (a == NULL && b != NULL)
    return 0;

  // Creates stacks for 'a' and 'b', where 'a' is the preorder.
  stack_1 = make_preorder_stack(a);
  stack_2 = make_postorder_stack(b);

  // First KindredSpirits check.
  pre_a = sameStack(stack_1, stack_2);

  // Cleaning up after myself.
  destroyStack(stack_1);
  destroyStack(stack_2);

  if (pre_a == 1)
    return 1;

  // Creates stacks for 'a' and 'b', where 'b' is preorder.
  stack_1 = make_preorder_stack(b);
  stack_2 = make_postorder_stack(a);

  // Second KindredSpirits check.
  pre_b = sameStack(stack_1, stack_2);

  // Cleaning up after myself.
  destroyStack(stack_1);
  destroyStack(stack_2);

  if (pre_b == 1)
    return 1;
  else
    return 0;

}
